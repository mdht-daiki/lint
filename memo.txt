https://qiita.com/square1001/items/1aa12e04934b6e749962

大きい整数を一桁の整数の配列として表現する
N桁の整数A -> 長さNの整数の配列a = a[0], a[1], a[2], ...
A = a[0] + a[1] * 10^1 + a[2] * 10^2 + a[N-1] * 10^(N-1)
16777216 = {6, 1, 2, 7, 7, 7, 6, 1}

文字列をint型配列に変換する関数
string_to_lint
引数：文字列S
戻り値：配列digit
N：文字列の長さ
要素数Nのint型配列digitを作成する
digitのi番目の要素に10^iの位の数字を代入する
10^iの位はSの何文字目？

strlenの戻り値は'\0'を含まない長さなので、
N=strlen(S)=5
  6       3       3       4       2       '\0'
  10^4    10^3    10^2    10^1    10^0    
  1文字目 2文字目 3文字目 4文字目 5文字目 6文字目
  S[0]    S[1]    S[2]    S[3]    S[4]    

i     N-i   N-i-1
0     5     4
1     4     3
2     3     2
3     2     1
4     1     0

よってdigit[i] = S[N-i-1]を整数に変形したもの
数字を整数に変形するには数字-'0'の演算をすればよい
よってdigit[i] = S[N-i-1] - '0'
これをi=0からi<Nの範囲で繰り返す

文字列がint型配列に変換できるものか確認する
check_string
引数：文字列S
戻り値：変換可能->1, 変換不可->0
N：文字列の長さ
for(i=0; i<N; i++)
S[i]が整数ではない場合、0を返す

S[i]が整数を含まない
-> S[i] < '0' または S[i] > '9'

符号による分岐
足し算 a + b
a > 0 && b > 0
  a + b > 0
  ans.digit = a.digit + b.digit
a > 0 && b < 0
  a.digit > b.digit
    a + b > 0
    ans.digit = a.digit - b.digit;
  a.digit < b.digit
    a + b < 0
    ans.digit = b.digit - a.digit;
a < 0 && b > 0
  a.digit > b.digit
    a + b < 0
    ans.digit = a.digit - b.digit;
  a.digit < b.digit
    a + b > 0
    ans.digit = b.digit - a.digit;
a < 0 && b < 0
  a + b < 0
  ans.digit = a.digit + b.digit;


引き算 a - b
a > b --> a - b > 0   ans.sign_pm = PLUS
  a > b > 0
    ans.digit = a.digit - b.digit
  a > 0 > b                           a.sign_pm != b.sign_pm -> ans = a + b
    ans.digit = a.digit + b.digit
  0 > a > b
    ans.digit = b.digit - a.digit

a < b --> a - b < 0   ams.sign_pm = MINUS
  b > a > 0
    ans.digit = b.digit - a.digit
  b > 0 > a
    ans.digit = a.digit + b.digit;
  0 > b > a
    ans.digit = a.digit - b.digit;

符号が違う場合
計算結果の絶対値は絶対値の和
符号が同じ場合
計算結果の絶対値は絶対値の差の絶対値
すなわちa,bのうち絶対値が大きい方の絶対値から小さい方の絶対値を引いたもの
aの絶対値 > bの絶対値のとき ans = a - b
bの絶対値 > aの絶対値のとき ans = b - a

Lintを使った小数の表現方法
xxxxxxxxxxxxxx xxxxxxxxxxxxxxxxx
              .

長い整数として考え、小数点をどこに打つかで考える。
int dp
l.digit[l.dp]を10^0の位と考える。
l.digit[n]は10^(n-dp)の位

check_string
S[i]が数字の時 OK
S[i]が数字ではない時
  S[i]が'-'の時
    i != 0の時 NG
    i == 0の時 ok
  S[i]が'.'の時
    iが最初または最後の時 NG
    i == 0 || i == length-1
    iが最初でも最後でもない時
    else
      すでに'.'が出てきている時
      dp_flag != 0
      今までに'.'が一度も出てきていない時
      else
        最初の文字が'-'の時
        S[0] == '-'
          '.'の位置が'-'の直後 NG
          i == 1
          '.'の位置が'-'の直後でない OK
          i != 1
        最初の文字が'-'以外の時 OK
  S[i]が'-'でも'.'でもない時 NG

int cannot_flag = 0
for(int i = 0; i < N; i++) {
  if(!(isdigit(S[i]))) {                              /* 数字以外の記号 */
    if(S[i] == '-') {
      if(i != 0) cannot_flag++;                       /* マイナス符号が先頭以外に存在する */
    } else if(S[i] == '.') {
      if(i == 0 || i == length - 1) cannot_flag++;    /* 小数点が先頭または最後尾に存在する */
      else {
        if(dp_flag != 0) cannot_flag++;               /* 小数点が2つ以上ある */
        else {
          dp_flag++;
          if(S[0] == '-') {
            if(i == 1) cannot_flag++;                 /* マイナスの直後に小数点が存在する -.000 */
          }
        }
      }
    } else 
      cannot_flag++;                                  /* マイナス、小数点以外の記号 */
  }
}
if(cannot_flag != 0) {
  printf("変換できません。\n");
  return 0;
}
return 1;